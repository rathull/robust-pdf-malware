import os
import argparse
import pickle
import numpy as np
import pandas as pd
from tqdm import tqdm

def byteplot_from_bytes(string_of_bytes, width=256):
    bytes = np.frombuffer(string_of_bytes.encode('utf-8'), dtype=np.uint8)
    
    height = int(np.ceil(len(bytes) / width))
    
    # Pad with null bytes
    byte_length = width*height
    plot = np.zeros(byte_length, dtype=np.uint8)
    plot[:len(bytes)] = bytes
    plot = plot.reshape((height, width))

    return plot

# Function to simulate processing the entire dataset
def generate_byteplots(small):
    # Make sure data exists
    if not os.path.exists('training.csv'):
        raise FileNotFoundError("The file training.csv does not exist.")

    # Load data
    print('Reading csv...')
    df = pd.read_csv('training.csv')
    print('Finished reading csv')
    if small:
        df = df.head(10)
    df = df.drop(columns=['name', 'id'])
    strings_of_bytes = df['contents'].to_numpy()
    
    # Populate with byteplots
    X = [byteplot_from_bytes(i) 
         for i in tqdm(strings_of_bytes, desc="Generating byte plots")]
    # Populate with labels
    y = df['label'].to_numpy()
    
    with open('byteplots.pkl', 'wb') as f:
        pickle.dump(X, f, pickle.HIGHEST_PROTOCOL)

    with open('labels.pkl', 'wb') as f:
        pickle.dump(y, f, pickle.HIGHEST_PROTOCOL)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Process some data.')
    parser.add_argument('--small', action='store_true',
                        help='Process a small portion of the dataset')
    
    args = parser.parse_args()
    
    generate_byteplots(args.small)
